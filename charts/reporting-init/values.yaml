## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName
#   storageClass: myStorageClass

reportingInstallationName: '{{ .Release.Name }}-reporting'
debeziumInstallationName: '{{ tpl .Values.reportingInstallationName $ }}-debezium'
osKafkaConnectorInstallationName: '{{ tpl .Values.reportingInstallationName $ }}-os-kafka-connector'
opensearchInstallationName: '{{ tpl .Values.reportingInstallationName $ }}-opensearch'
dedupeOpensearchInstallationName: '{{ .Release.Name }}-deduplicator-opensearch'
postgresqlInstallationName: '{{ .Release.Name }}-postgresql'

## Add labels to all the deployed resources
##
commonLabels: {}
## Add annotations to all the deployed resources
##
commonAnnotations: {}

hookAnnotations:
  "helm.sh/hook": post-install,post-upgrade
  "helm.sh/hook-weight": "0"
  "helm.sh/hook-delete-policy": before-hook-creation

backoffLimit: 5

image:
  registry: docker.io
  repository: openg2p/reporting-init-shell-tools
  tag: develop
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: Always
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistryKeySecretName

## Command and args for running the container (set to default if not set). Use array form
##
command: []

args: []

## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## Clamav container already runs as 'mosip' user, so we may not need to enable this
containerSecurityContext:
  enabled: false
  runAsUser: 1001
  runAsNonRoot: true

## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
##
podSecurityContext:
  enabled: false
  fsGroup: 1001

## Pod extra labels
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}

## Annotations for server pods.
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations:
  sidecar.istio.io/inject: "false"

## Add init containers to the  pods.
## Example:
## initContainers:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
initContainers: []

## Add sidecars to the  pods.
## Example:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: []

## Specifies whether RBAC resources should be created
##
rbac:
  create: true

## Specifies whether a ServiceAccount should be created
##
serviceAccount:
  ## The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name:

## Extra volumes to add to the deployment
##
extraVolumes: []

## Extra volume mounts to add to the container
##
extraVolumeMounts: []

debeziumConnectorConfigMap: ""

opensearchConnectorConfigMap: ""

dashboardsConnectorConfigMap: ""

gitConfig:
  enabled: true
  repoUrl: https://github.com/openg2p/openg2p-reporting
  branch: develop
  subDir: ""
  envVars:
    GIT_CONFIG_REPO_URL:
      secretKeyRef:
        name: '{{ include "common.names.fullname" . }}-git-config'
        key: repoUrl
    GIT_CONFIG_BRANCH:
      secretKeyRef:
        name: '{{ include "common.names.fullname" . }}-git-config'
        key: branch
    GIT_CONFIG_SUB_DIR:
      secretKeyRef:
        name: '{{ include "common.names.fullname" . }}-git-config'
        key: subDir

envVars:
  GIT_CONFIG_ENABLED: '{{ .Values.gitConfig.enabled }}'

  DEBEZIUM_URL: '{{ tpl .Values.debeziumInstallationName $ }}'
  OS_KAFKA_CONNECTOR_URL: '{{ tpl .Values.osKafkaConnectorInstallationName $ }}'

  DB_HOSTNAME: '{{ tpl .Values.postgresqlInstallationName $ }}'
  DB_PORT: 5432
  DB_USER: postgres
  DB_NAME: '' # To be filled
  DB_PREFIX_INDEX: '{{ .Release.Namespace | replace "-" "_" }}_{{ .Release.Name | replace "-" "_" }}' # To be modified according to app
  DEFAULT_DEBEZIUM_CONNECTOR_HEARTBEAT_MS: 5000

  OPENSEARCH_URL: 'https://{{ tpl .Values.opensearchInstallationName $ }}:9200'
  OPENSEARCH_DASHBOARDS_URL: 'http://{{ tpl .Values.opensearchInstallationName $ }}-dashboards:5601'

  OPENSEARCH_SECURITY_ENABLED: true
  OPENSEARCH_USERNAME: admin

  DEDUPE_OPENSEARCH_URL: 'https://{{ tpl .Values.dedupeOpensearchInstallationName $ }}:9200'
  DEDUPE_OPENSEARCH_SECURITY_ENABLED: true
  DEDUPE_OPENSEARCH_USERNAME: admin

  dollar: '$'

envVarsFrom:
  DB_PASS:
    secretKeyRef:
      name: '{{ tpl .Values.postgresqlInstallationName $ }}'
      key: postgres-password
  OPENSEARCH_PASSWORD:
    secretKeyRef:
      name: '{{ tpl .Values.opensearchInstallationName $ }}'
      key: opensearch-password
  DEDUPE_OPENSEARCH_PASSWORD:
    secretKeyRef:
      name: '{{ tpl .Values.dedupeOpensearchInstallationName $ }}'
      key: opensearch-password

startUpCommand: |-
  #!/usr/bin/env bash

  set -o pipefail
  set -e

  until pg_isready -h ${DB_HOSTNAME} -p ${DB_PORT}; do sleep 3; done && echo "Connection with PostgreSQL successful."
  curl -k -I -s -o /dev/null -m 10 --retry 100 --retry-delay 10 --retry-all-errors "${OPENSEARCH_URL}" && echo "Connection with OpenSearch successful."
  curl -k -I -s -o /dev/null -m 10 --retry 100 --retry-delay 10 --retry-all-errors "${DEBEZIUM_URL}" && echo "Connection with Debezium successful"
  curl -k -I -s -o /dev/null -m 10 --retry 100 --retry-delay 10 --retry-all-errors "${OS_KAFKA_CONNECTOR_URL}" && echo "Connection with OpenSearch Kafka Connector successful"
  # TODO: wait for kafka (?)

  if [ "$GIT_CONFIG_ENABLED" = "true" ]; then
    cd /tmp
    git clone -b "$GIT_CONFIG_BRANCH" --depth 1 "$GIT_CONFIG_REPO_URL" config
    config_dir=config/${GIT_CONFIG_SUB_DIR}
    mv $config_dir /reporting-init/config
  fi

  cd /reporting-init/config

  function contains() {
    arr=$1
    value_to_check=$2
    for conn in $arr ; do if [ "$conn" = "$value_to_check" ]; then echo "yes"; fi ; done
  }

  echo "====> DEBEZIUM CONNECTORS"
  if [ -d debezium-connectors ]; then
    echo "==> Starting Debezium Connector Initialization"
    debezium_existing_connectors_list=$(curl -s $DEBEZIUM_URL/connectors | jq -cr '.[]')
    debezium_new_connectors_list=()
    for debezium_conn in debezium-connectors/*.json ; do
      debezium_connector_config=$(envsubst < $debezium_conn | jq -cr '.')
      debezium_connector_name=$(echo $debezium_connector_config | jq -cr '.name')
      debezium_new_connectors_list+=("$debezium_connector_name")

      debez_wait_init_secs=$(echo $debezium_connector_config | jq -cr '.wait_after_init_secs // empty')
      debez_wait_update_secs=$(echo $debezium_connector_config | jq -cr '.wait_after_update_secs // empty')
      debezium_connector_config=$(echo $debezium_connector_config | jq -cr 'del(.wait_after_init_secs, .wait_after_update_secs)')

      if_exists=$(contains "$debezium_existing_connectors_list" "$debezium_connector_name")
      if [ -z "$if_exists" ]; then
        echo "==> Creating new Connector - $debezium_connector_name."
        curl -s -XPOST -H 'Content-Type: application/json' $DEBEZIUM_URL/connectors -d "$debezium_connector_config" | jq
        if [ -n "$debez_wait_init_secs" ]; then
          sleep $debez_wait_init_secs
        fi
      else
        echo "==> Connector - $debezium_connector_name - already exists. Updating config."
        curl -s -XPUT -H 'Content-Type: application/json' $DEBEZIUM_URL/connectors/${debezium_connector_name}/config -d "$(echo $debezium_connector_config | jq -cr '.config')" | jq
        if [ -n "$debez_wait_update_secs" ]; then
          sleep $debez_wait_update_secs
        fi
      fi
    done
    echo "==> Starting deletion process for old debezium connectors."
    debezium_new_connectors_list=${debezium_new_connectors_list[@]}
    for connector_to_delete in $debezium_existing_connectors_list; do
      if_exists=$(contains "$debezium_new_connectors_list" "$connector_to_delete")
      if [ -z "$if_exists" ]; then
        echo "==> Deleting old connector - $connector_to_delete."
        curl -s -XDELETE $DEBEZIUM_URL/connectors/${connector_to_delete} | jq
      fi
    done
  fi

  echo "====> OPENSEARCH CONNECTORS"
  if [ -d opensearch-connectors ]; then
    echo "==> Starting Opensearch Connector Initialization"
    os_existing_connectors_list=$(curl -s $OS_KAFKA_CONNECTOR_URL/connectors | jq -cr '.[]')
    os_new_connectors_list=()
    for os_conn in opensearch-connectors/*.json ; do
      os_connector_config=$(envsubst < $os_conn | jq -cr '.')
      os_connector_name=$(echo $os_connector_config | jq -cr '.name')
      os_new_connectors_list+=("$os_connector_name")

      os_wait_init_secs=$(echo $os_connector_config | jq -cr '.wait_after_init_secs // empty')
      os_wait_update_secs=$(echo $os_connector_config | jq -cr '.wait_after_update_secs // empty')
      os_connector_config=$(echo $os_connector_config | jq -cr 'del(.wait_after_init_secs, .wait_after_update_secs)')

      if_exists=$(contains "$os_existing_connectors_list" "$os_connector_name")
      if [ -z "$if_exists" ]; then
        echo "==> Creating new Connector - $os_connector_name."
        curl -s -XPOST -H 'Content-Type: application/json' $OS_KAFKA_CONNECTOR_URL/connectors -d "$os_connector_config" | jq
        if [ -n "$os_wait_init_secs" ]; then
          sleep $os_wait_init_secs
        fi
      else
        echo "==> Connector - $os_connector_name - already exists. Updating config."
        curl -s -XPUT -H 'Content-Type: application/json' $OS_KAFKA_CONNECTOR_URL/connectors/${os_connector_name}/config -d "$(echo $os_connector_config | jq -cr '.config')" | jq
        if [ -n "$os_wait_update_secs" ]; then
          sleep $os_wait_update_secs
        fi
      fi
    done
    echo "==> Starting deletion process for old opensearch-connectors."
    os_new_connectors_list=${os_new_connectors_list[@]}
    for connector_to_delete in $os_existing_connectors_list; do
      if_exists=$(contains "$os_new_connectors_list" "$connector_to_delete")
      if [ -z "$if_exists" ]; then
        echo "==> Deleting old connector - $connector_to_delete."
        curl -s -XDELETE $OS_KAFKA_CONNECTOR_URL/connectors/${connector_to_delete} | jq
      fi
    done
  fi

  echo "====> OPENSEARCH DASHBOARDS"
  if [ -d opensearch-dashboards ]; then
    TEMP_DASHBOARD_OBJECT_FILE="/tmp/temp_kib_obj.ndjson"

    for os_dash in opensearch-dashboards/*.ndjson ; do
      $(envsubst < $os_dash) > $TEMP_DASHBOARD_OBJECT_FILE
      echo "==> Importing Dashboard - $os_dash."
      curl -u $OPENSEARCH_USERNAME:$OPENSEARCH_PASSWORD -XPOST "${OPENSEARCH_DASHBOARDS_URL}/api/saved_objects/_import?overwrite=true" -H "osd-xsrf: true" --form file=@$TEMP_OBJ_FILE
    done
  fi
